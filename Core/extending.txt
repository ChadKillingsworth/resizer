The ImageResizer V3 rewrite was primarily intended to make the ImageResizer open and extensible.

V3 Introduces the concept of Plugins, as well as adding an array of Events that can be used to customize the behavior of the pipeline.
It also introduces a dedicated configuration section for the Resizer and its plugins, which is freeform and easily queryied with a CSS-like syntax.

++ Plugins can be used to 

1) Modify caching behavior, or implement new kinds of persistent caches (ICache)
2) Modify http headers
3) Modify the behavior of image processing (40+ methods to override, with XML documentation).
4) Implement new visual effects, add watermarks, or new functionality
5) Perform URL rewriting or querystring expansion
6) Add support for new image formats
7) Add support for new image output formats (IEncoder)
8) Apply advanced security rules

++ Events can be registered through  the ImageResizer.Configuration Config.Current.Pipeline class

All events include comprehensive event information and most include mutable objects that allow behavior to be modified.

/// Fired once, on the first PostAuthorizeRequest event.
RequestHook OnFirstRequest;

/// Fires during the PostAuthorizeRequest phase, prior to any module-specific logic.
/// Executes for every request to the website. Use only as a last resort. Other events occur only for image requests, and thus have lower overhead.
RequestHook PostAuthorizeRequestStart;


/// Fired during PostAuthorizeRequest, after ResizeExtension has been removed.
/// On fired on requests with extensions that match supported image types. 
/// You can add additonal supported image extentions by registering a plugin that implementes IQuerystringPlugin, or you can add an 
/// extra extension in the URL and remove it here. Example: .psd.jpg</para>

UrlRewritingHook Rewrite;

/// Fired during PostAuthorizeRequest, after Rewrite.
/// Any changes made here (which conflict) will be overwritten by the the current querystring values. I.e, this is a good place to specify default settings.
/// <para>Only fired on accepted image types. (see Rewrite)</para>

UrlRewritingHook RewriteDefaults;

/// Fired after all other rewrite events.
/// Only fired on accepted image types. (see Rewrite)

UrlRewritingHook PostRewrite;

/// Fired after all rewriting should be finished, and the secondary UrlAuthorization has been completed. Plugins wanting to add additional authorization rules can implement them in a handler,
/// and modify the response accordingly.
UrlRewritingHook PostAuthorizeImage;

/// Fired immediately before the image request is sent off to the caching system for proccessing.
/// Allows modification of response headers, caching arguments, and callbacks.
PreHandleImageHook PreHandleImage;

/// Allows cache selection to be determined by external code
CacheSelectionDelegate SelectCachingSystem;