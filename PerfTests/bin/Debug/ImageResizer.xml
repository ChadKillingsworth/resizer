<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageResizer</name>
    </assembly>
    <members>
        <member name="T:ImageQuantization.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="T:ImageQuantization.Quantizer">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:ImageQuantization.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="F:ImageQuantization.Quantizer.fourPass">
            <summary>
            If true, image is re-paletted after quantization, and dithering occurs on a separate frame from the source.
            </summary>
        </member>
        <member name="M:ImageQuantization.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:ImageQuantization.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:ImageQuantization.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap. If dithering is enabled, sourceData will be modified. 
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="intermediate">The intermediate bitmap, used for 4-pass quantization. If specified, output will not actually be modified</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:ImageQuantization.Quantizer.InitialQuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ImageQuantization.Quantizer.QuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ImageQuantization.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ImageQuantization.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:ImageQuantization.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:ImageQuantization.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Reset">
            <summary>
            Clears the octree
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Reset(System.Int32,System.Int32)">
            <summary>
            Clears the octree and reconfigures color settings
            </summary>
            <param name="maxColors"></param>
            <param name="maxColorBits"></param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.InitialQuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.DitherMatrix">
            <summary>
            a Floyd-Steinberg dither matrix
            new float[,] {{0,0,0},
            {0,0,0.44f},
            {0.19f,0.31f,0.06f}};
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.QuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Dither">
            <summary>
            Uses a Floyd-Steinberg dither
            </summary>
        </member>
        <member name="T:ImageQuantization.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.AddColor(ImageQuantization.Quantizer.Color32)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.TrackPrevious(ImageQuantization.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.GetPaletteIndex(ImageQuantization.Quantizer.Color32)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="T:ImageQuantization.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,ImageQuantization.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.AddColor(ImageQuantization.Quantizer.Color32,System.Int32,System.Int32,ImageQuantization.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(ImageQuantization.Quantizer.Color32,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.FindClosestMatch(ImageQuantization.Quantizer.Color32)">
            <summary>
            Added may 19-09. Should help with dithering.
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Increment(ImageQuantization.Quantizer.Color32)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="T:fbs.ImageResizer.ImageManager">
            <summary>
            Provides methods for generating resizied images, and for reading and writing them to disk.
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.getBestInstance">
            <summary>
            Looks for AnimatedImageManager and returns an instance of that if possible. Otherwise, returns an 
            ImageManager instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.BuildImage(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Takes sourceFile, resizes it, and saves it to targetFile using the querystring values in request.
            </summary>
            <param name="sourceFile"></param>
            <param name="targetFile"></param>
            <param name="request"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.BuildImage(System.Web.HttpPostedFile,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Takes sourceFile, resizes it, and saves it to targetFile using the querystring values in request.
            </summary>
            <param name="sourceFile"></param>
            <param name="targetFile"></param>
            <param name="request"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.HasResizingDirective(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns true if the specified querystring collection uses a resizing command
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.IsOneSpecified(System.String[])">
            <summary>
            Returns true if one or more of the arguments has a non-null or non-empty value
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.BuildImage(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Generates a resized bitmap from the specifed source file and the specified querystring. Understands width/height and maxwidth/maxheight.
            Throws either an ArgumentException or IOException if the source image is invalid.
            Always use ImageOutputSettings to save images, since Image.Save doesn't work well for GIF or PNGs, and needs custom params for Jpegs.
            </summary>
            
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.BuildImage(System.Web.HttpPostedFile,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Generates a resized bitmap from the specifed source file and the specified querystring. Understands width/height and maxwidth/maxheight.
            Throws either an ArgumentException or IOException if the source image is invalid.
            Always use ImageOutputSettings to save images, since Image.Save doesn't work well for GIF or PNGs, and needs custom params for Jpegs.
            </summary>
            
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.BuildImage(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new bitmap of the required size, and draws the specified image (with border, background, padding, and shadow).
            Always use ImageOutputSettings to save images, since Image.Save doesn't work well for GIF or PNGs, and needs custom params for Jpegs.
            </summary>
            <param name="src"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.BuildImage(System.Drawing.Bitmap,fbs.ImageResizer.ResizeSettings,fbs.ImageResizer.ImageSettings,fbs.ImageResizer.ImageFilter,fbs.ImageResizer.ImageOutputSettings,fbs.ImageResizer.WatermarkSettings)">
            <summary>
            Creates a new bitmap of the required size, and draws the specified image (with border, background, padding, and shadow).
            Accepts parallelagrams, so rotation and skew is permitted.
            Use SelectActiveFrame() to select the right frame prior to calling BuildImage
            </summary>
            <param name="page">The page or frame. Use 0 for default.</param>
            <param name="watermark">Optional, can be null. Plugin for watermarking code</param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageManager.DrawOuterGradient(System.Drawing.Graphics,System.Drawing.PointF[],System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Draws a gradient around the specified polygon. Fades from 'inner' to 'outer' over a distance of 'width' pixels. 
            </summary>
            <param name="g"></param>
            <param name="poly"></param>
            <param name="inner"></param>
            <param name="outer"></param>
            <param name="width"></param>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.RoundPoints(System.Drawing.PointF[])">
            <summary>
            Rounds the elements of the specified array [not used]
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.RoundPoints(System.Drawing.PointF[0:,0:])">
            <summary>
            Rounds the elements of the specified array [not used]
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.ForEach(System.Array,fbs.ImageResizer.PolygonMath.ForEachFunction)">
            <summary>
            Modifies the specified array by applying the specified function to each element.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.RotatePoly(System.Drawing.PointF[],System.Double)">
            <summary>
            Rotates the specified polygon around the origin. 
            </summary>
            <param name="rect"></param>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.ToPoly(System.Drawing.RectangleF)">
            <summary>
            Returns a clockwise array of points on the rectangle.
            Point 0 is top-left.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.NormalizePoly(System.Drawing.PointF[])">
            <summary>
            Moves the polygon so that the upper-left corner of its bounding box is located at 0,0.
            </summary>
            <param name="poly"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.RotateVector(System.Drawing.PointF,System.Double)">
            <summary>
            Rotates the specified point around the origin.
            </summary>
            <param name="v"></param>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.ChangeMagnitude(System.Drawing.PointF,System.Single)">
            <summary>
            Returns a modified version of the specified vector with the desired length.
            </summary>
            <param name="v"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.GetBoundingBox(System.Drawing.PointF[])">
            <summary>
            Returns a bounding box for the specified set of points.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.MovePoly(System.Drawing.PointF[],System.Drawing.PointF)">
            <summary>
            Returns a modified version of the array, with each element being offset by the specified amount.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.ArraysEqual(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
            Returns true if the member elements of the specified arrays match, and the arrays 
            are of the same length.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.getParallelogram(System.Drawing.PointF[])">
            <summary>
            Moves element 4 to spot 3 and truncates to 3 elements.
            For compatiblity with Graphics.DrawImage
            </summary>
            <param name="quad"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.GetSubArray(System.Drawing.PointF[0:,0:],System.Int32)">
            <summary>
            Grabs a single-dimension array from a 2 dimensional array, using the specified primary index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.GenerateRadialBrush(System.Drawing.Color,System.Drawing.Color,System.Drawing.PointF,System.Single)">
            <summary>
            Approximates a radial brush using a high-rez PathGradientBrush.
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <param name="pt"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.ScaleInside(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Scales 'fitInside' to fit inside 'bounding' while maintaining aspect ratio. Upscales and downscales.
            </summary>
            <param name="bounding"></param>
            <param name="fitInside"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.FitsInside(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Returns true if 'inner' fits inside or equals 'outer'
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.GetCorners(System.Drawing.PointF[],System.Single)">
             <summary>
             Returns an array of parallelograms. These parallelgrams are the 'corners' outside each vertex in 'poly'.
             The adjacent edges are perpendicular to 'poly'. Point 1 of each parallelogram will match the respective point in 'poly'
             Points are clockwise.
            
             TODO - some rounding issues going on, not exact numbers here
             </summary>
             <param name="inner"></param>
             <param name="outer"></param>
             <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.GetCorners(System.Drawing.PointF[],System.Single[])">
            <summary>
            Returns an array of parallelograms. These parallelgrams are the 'corners' outside each vertex in 'poly'.
            The adjacent edges are perpendicular to 'poly'. Point 1 of each parallelogram will match the respective point in 'poly'
            Points are clockwise.
            
            Each float in widths[] corresponds to the point in poly[]. This is the distance to go perpendicularly from 
            the line beween poly[i] and poly[i +1].
            
            </summary>
            <param name="poly"></param>
            <param name="widths"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.GetSides(System.Drawing.PointF[],System.Single)">
            <summary>
            Returns an array of parallelograms. These parallelgrams are the 'sides' bounding the polygon.
            Points are clockwise. Point 1 is the top-left outer point, point 2 the top-right, point 3 the bottom-right, and point 4 the bottom-left.
            </summary>
            <param name="poly"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.InflatePoly(System.Drawing.PointF[],System.Single)">
            <summary>
            Expands all sides on the specified polygon by the specified offset. Assumes the polygon is concave.
            Returns a new polygon
            </summary>
            <param name="quad"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.InflatePoly(System.Drawing.PointF[],System.Single[])">
            <summary>
            Expands all sides on the specified polygon by the specified offsets. Assumes the polygon is concave.
            Returns a new polygon.
            
            </summary>
            <param name="quad"></param>
            <param name="offsets">An array the same size as poly[], with the distances to expand the edges. Edges are between i and i+1</param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.PolygonMath.CenterInside(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
            Moves 'inner' so that the center of its bounding box equals the center of the bounding box of 'outer'
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="T:fbs.ImageResizer.WatermarkSettings">
            <summary>
            Provides extensibility points for drawing watermarks and even modifying resizing/image settings
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.WatermarkSettings.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new WatermarkSettings class
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:fbs.ImageResizer.WatermarkSettings.ModifySettings(fbs.ImageResizer.ResizeSettings,fbs.ImageResizer.ImageSettings,fbs.ImageResizer.ImageFilter,fbs.ImageResizer.ImageOutputSettings)">
            <summary>
            Executed prior to resizing. Permits modifications of geometry and effect settings
            </summary>
            <param name="rs"></param>
            <param name="opts"></param>
        </member>
        <member name="M:fbs.ImageResizer.WatermarkSettings.Process(System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            Modify this to do watermarks. Executing after resizing is complete
            </summary>
            <param name="b"></param>
            <param name="g"></param>
        </member>
        <member name="T:fbs.ImageResizer.InterceptModule">
            <summary>
            Monitors incoming image requests. Image requests that request resizing are processed. The resized images are immediately written to disk, and 
            the request is rewritten to the disk-cached resized version. This way IIS can handle the actual serving of the file.
            The disk-cache directory is protected through URL authorization.
            See CustomFolders.cs for any type of URL rewriting 
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.InterceptModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            Called when the app is initialized
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:fbs.ImageResizer.InterceptModule.CheckRequest_PostAuthorizeRequest(System.Object,System.EventArgs)">
            <summary>
            This is where we filter requests and intercet those that want resizing performed.
            We first check for image extensions... 
            If it is one, then we run it through the CustomFolders methods to see if if there is custom resizing for it..
            If there still aren't any querystring params after that, then we ignore the request.
            If the file doesn't exist, we also ignore the request. They're going to cause a 404 anyway.
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:fbs.ImageResizer.InterceptModule.getCachedVersionFilename(fbs.yrl)">
            <summary>
            Builds the physical path for the cached version, using the hashcode of the normalized URL.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.InterceptModule.ResizeRequest(System.Web.HttpContext,fbs.yrl)">
            <summary>
            Generates the resized image to disk (if needed), then rewrites the request to that location.
            Perform 404 checking before calling this method. Assumes file exists.
            Called during PostAuthorizeRequest
            </summary>
            <param name="r"></param>
            <param name="extension"></param>
        </member>
        <member name="M:fbs.ImageResizer.InterceptModule.context_PreSendRequestHeaders(System.Object,System.EventArgs)">
            <summary>
            We don't actually send the data - but we still want to control the headers on the data.
            PreSendRequestHeaders allows us to change the content-type and cache headers at excatly the last
            second. We populate the headers from context.Items["FinalContentType"],
            context.Items["ContentExpires"], and context.Items["FinalCachedFile"].
            This also indirectly enables server-side mem caching. (HttpCacheability.Public does it)
            We set the file dependency to FinalCachedFile so changes are update quickly server-side
            - however, clients will not check for updates until ContentExpires occurs.
             
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:fbs.ImageResizer.CustomFolders">
            <summary>
            Here is where you can set up custom image size defaults for folders (or any pattern you want). You can also perform URL rewriting on your images.
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.CustomFolders.processPath(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Called for all image requests during PostAuthorizeRequest. 
            
            Any custom URL syntaxes can be parsed here - just populate 'q' with the resulting data.
            
            This method returns the 'real' path of the image, i.e. /app/img/file.jpg will be returned for /app/img/resize(50,50,jpg)/file.jpg
            
            Should be very fast - don't make and I/O or database calls here.
            AllowURLRewriting must be enabled if you want to return something other than 'filePath'. You can still populate the querystring without this setting.
            AllowURLRewriting is required for the /resize(50,50,jpg)/ syntax. 
            
            This is the only method the rest of the the image resizer touches. If you don't care for the applyDefaults(), applyOverrides(), and resize(w,h,f) syntax,
            feel free to delete everything else in this class and provide your own implementation of this method.
            
            </summary>
            <param name="filePath"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.CustomFolders.applyDefaults(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Settings inserted here are overridden by the querystring values. (q gets overwritten with a copy of the original querystring, so only untouched parameters can be changed)
            q is populated with the original querystring values to start.
            </summary>
            <param name="filePath">The virtual domain-relative path (/app/folder/file.jpg). Doesn't include the querystring.</param>
        </member>
        <member name="M:fbs.ImageResizer.CustomFolders.applyOverrides(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Settings inserted here override the querystring values.
            </summary>
            <param name="filePath">The virtual domain-relative path (/app/folder/file.jpg). Doesn't include the querystring.</param>
        </member>
        <member name="M:fbs.ImageResizer.CustomFolders.resizeMatch(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Int32,System.Int32,System.String)">
            <summary>
            If substring is found within 'path', q["maxwidth"], q["maxheight"], and q["format"] are set to the specified values.
            Use -1 or null to omit a value.
            </summary>
            <param name="path"></param>
            <param name="substring"></param>
            <param name="q"></param>
            <param name="maxwidth"></param>
            <param name="maxheight"></param>
            <param name="format"></param>
        </member>
        <member name="F:fbs.ImageResizer.CustomFolders.resizeFolder">
            <summary>
            Matches /resize(x,y,f)/ syntax
            Fixed Bug - will replace both slashes.. make first a lookbehind
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.CustomFolders.parseResizeFolderSyntax(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses and removes the resize folder syntax "resize(x,y,f)/" from the specified file path. 
            Places settings into the referenced querystring
            </summary>
            <param name="path"></param>
            <param name="query">The collection to place parsed values into</param>
            <returns></returns>
        </member>
        <member name="T:fbs.ImageResizer.ImageSettings">
            <summary>
            TODO: later implement border, padding, and shadow support
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.ImageSettings.parseFromQuerystring(System.Collections.Specialized.NameValueCollection)">
            <summary>
            bgcolor=(transparent/white)
            paddingColor=(transparent/white)
            paddingWidth=x
            borderWidth=x
            borderColor=black
            shadowWidth=x
            shadowColor=black
            shadowOffset(x,y)|both
            </summary>
            <param name="q"></param>
        </member>
        <member name="T:fbs.ImageResizer.ImageFilter">
            <summary>
            Eventually I will extend this class to allow grayscale, brightness, alpha, and possibly contrast adjustment.
            </summary>
        </member>
        <member name="T:fbs.ImageResizer.ImageOutputSettings">
            <summary>
            Extracts the image output and encoding settings from the querystring. 
            Handles the saving of Image instances to a Stream using the .SaveImage method
            Doesn't handle animated image files - only single frames. (Neither does GDI)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:fbs.ImageResizer.ImageOutputSettings.parseFromQuerystring(System.Drawing.Imaging.ImageFormat,System.Collections.Specialized.NameValueCollection)" -->
        <member name="F:fbs.ImageResizer.ImageOutputSettings.Quality">
            <summary>
            The Jpeg compression quality. 90 is the best setting. 
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ImageOutputSettings.Colors">
            <summary>
            The number of colors to use. Only applicable for png, gif, and bmp photos where palletes can be used.
            The default is -1, which means "as much color fidelity as possible". 
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ImageOutputSettings.Dither">
            <summary>
            Enables dithering for PNG8 and GIF
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ImageOutputSettings.DisableCustomQuantization">
            <summary>
            Prevents custom quantization for GIFs, 8-bit PNGs, and 8-bit BMPs. When disabled, the default GDI quantization is used, which 
            produces poor-quality web-palette images. 
            The default quantization is faster, and sometimes is the only method that works 
            (such as in a low-trust environment or where the Marshal class is banned)
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetFinalExtension">
            <summary>
            Returns the file extension for the current OutputFormat
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetContentType">
            <summary>
            Returns the content type for the current OutputFormat
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SaveImageToNonSeekableStream(System.IO.Stream,System.Drawing.Image)">
            <summary>
            Safe for use with non-seekable streams. Writes the Png memory to an intermediate MemoryStream.
            Does use more memory on PNGs. FileStreams are seekable.
            </summary>
            <param name="s"></param>
            <param name="i"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SaveImage(System.IO.Stream,System.Drawing.Image)">
            <summary>
            Requires a seekable string for Png encoding. Use SaveImageToNonSeekableStream for non-seekable streams.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetSupportedOutputFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            If the specified ImageFormat is not supported for output, ImageFormat.Jpeg is returned.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetRequestedType(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the ImageFormat requested in the querystring.
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetImageFormatFromPhysicalPath(System.String)">
            <summary>
            Returns the ImageFormat enumeration value based on the extension in the specified physical path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetImageFormatFromExtension(System.String)">
            <summary>
            Returns an ImageFormat instance from the specfied extension. Supports jpg, jpeg, bmp, gif, png, tiff, and tff.
            returns null if not recognized.
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetExtensionFromImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns an string instance from the specfied ImageFormat. Supports jpg, bmp, gif, png, and tiff,
            Returns null if not recognized.
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.IsAcceptedImageType(System.String)">
            <summary>
            Returns true if the extension on the virtual path 'path' is one of the accepted types
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="F:fbs.ImageResizer.ImageOutputSettings._acceptedImageExtensions">
            <summary>
            Returns a list of (lowercase invariant) image extensions that the module works with.
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetContentTypeFromImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Supports Png, Jpeg, Gif, Bmp, and Tiff.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SaveJpeg(System.Drawing.Image,System.Int32,System.IO.Stream)">
            <summary>
            Saves the specified image to the specified stream using jpeg compression of the specified quality.
            </summary>
            <param name="b"></param>
            <param name="quality">A number between 0 and 100. Defaults to 90 if passed a negative number. Numbers over 100 are truncated to 100. 
            90 is a *very* good setting.
            </param>
            <param name="target"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SaveGif(System.Drawing.Image,System.IO.Stream,System.Byte,System.Boolean)">
            <summary>
            Colors argument has no effect when  useGdiQuantization is true.
            </summary>
            <param name="img"></param>
            <param name="target"></param>
            <param name="colors"></param>
            <param name="useGdiQuantization"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SavePng(System.Drawing.Image,System.IO.Stream,System.Byte,System.Boolean)">
            <summary>
            Requires seekable stream, i.e. MemoryString or FileStream. Colors argument has no effect when  useGdiQuantization is true.
            </summary>
            <param name="img"></param>
            <param name="target"></param>
            <param name="colors"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SaveIndexed(System.Drawing.Imaging.ImageFormat,System.Drawing.Image,System.IO.Stream,System.Byte,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Colors, dither, fourPass, and ditherPercent arguments have no effect when  useGdiQuantization is true.
            </summary>
            <param name="format"></param>
            <param name="img"></param>
            <param name="target"></param>
            <param name="colors"></param>
            <param name="dither"></param>
            <param name="fourPass"></param>
            <param name="ditherPercent"></param>
            <param name="useGdiQuantization"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SavePng(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Requires seekable stream, i.e. MemoryString or FileStream
            </summary>
            <param name="img"></param>
            <param name="target"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.SaveBmp(System.Drawing.Image,System.IO.Stream,System.Byte,System.Boolean)">
            <summary>
            Saves the bitmap. colors argument has no effect when useGdiQuantization is true.
            </summary>
            <param name="img"></param>
            <param name="target"></param>
            <param name="colors"></param>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetBitsNeededForColorDepth(System.Byte)">
            <summary>
            Returns how many bits are required to store the specified number of colors. Performs a Log2() on the value.
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ImageOutputSettings.GetImageCodeInfo(System.String)">
            <summary>
            Returns the first ImageCodeInfo instance with the specified mime type. Returns null if there are no matches.
            </summary>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="P:fbs.ImageResizer.ImageOutputSettings.OutputFormat">
            <summary>
            If you set this to an unsupported output format (anything other than png, gif, or jpg), it will be the same as settting it to Jpeg. Input is autocorrected.
            </summary>
        </member>
        <member name="P:fbs.ImageResizer.ImageOutputSettings.SupportsTransparency">
            <summary>
            Returns true if the desired output type supports transparency.
            </summary>
        </member>
        <member name="T:fbs.ImageResizer.ResizeSettings">
            <summary>
            Extracts all of the resizing, cropping, stretching, rotation, and flipping settings.
            Merges the data in CalculateSizingData and returns the source rect, target poly, and target area poly. Flipping must be done separately.
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.ResizeSettings.parseList(System.String,System.Double)">
            <summary>
            Parses lists in the form "3,4,5,2,5" and "(3,4,40,50)". If a number cannot be parsed (i.e, number 2 in "5,,2,3") defaultValue is used.
            </summary>
            <param name="text"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.ResizeSettings.parseFromQuerystring(System.Collections.Specialized.NameValueCollection)">
            Understands width, height, maxwidth, maxheight, rotate=deg, 
            stretch=fill, (stretches images)
            stretch=proportionally(default) (letterboxes image with background color instead of stretching), 
            crop=none (default)
            crop=auto (minimally crops to preserve aspect ratio), and
            crop=(x,y,x2,y2) (crops the source image to the specified rectangle)
        </member>
        <member name="M:fbs.ImageResizer.ResizeSettings.parseFlip(System.String)">
            <summary>
            Returns RotateNoneFlipNone if not a recognize value.
            </summary>
            <param name="sFlip"></param>
            <returns></returns>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.rotate">
            <summary>
            Degrees of rotation to apply
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.flip">
            <summary>
            Applied last, after all effects. 
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.sourceFlip">
            <summary>
            Flips the source image prior to processing. 
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.crop">
            <summary>
            Crop settings. Defaults to None - letterboxing is used if stretch=p. 
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.stretch">
            <summary>
            Whether to preserve aspect ratio or stretch.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.scale">
            <summary>
            Whether to downscale, upscale, or allow both on images
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:fbs.ImageResizer.ResizeSettings.CalculateSizingData(System.Drawing.SizeF,System.Drawing.SizeF)" -->
        <member name="F:fbs.ImageResizer.ResizeSettings.CropMode.None">
            <summary>
            Default. No cropping - uses letterboxing if strecth=proportionally and both width and height are specified.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.CropMode.Auto">
            <summary>
            Minimally crops to preserve aspect ratio if stretch=proportionally.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.CropMode.Custom">
            <summary>
            Crops using the custom crop rectangle. Letterboxes if stretch=proportionally and both widht and height are specified.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.StretchMode.Proportionally">
            <summary>
            Maintains aspect ratio. Default.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.StretchMode.Fill">
            <summary>
            Skews image to fit the new aspect ratio defined by 'width' and 'height'
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.ScaleMode.DownscaleOnly">
            <summary>
            The default. Only downsamples images - never enlarges. If an image is smaller than 'width' and 'height', the image coordinates are used instead.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.ScaleMode.UpscaleOnly">
            <summary>
            Only upscales (zooms) images - never downsamples except to meet web.config restrictions. If an image is larger than 'width' and 'height', the image coordinates are used instead.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.ScaleMode.Both">
            <summary>
            Upscales and downscales images according to 'width' and 'height', within web.config restrictions.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.ImageSizingData.sourceRect">
            <summary>
            The rectangular area of the original image to use
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.ImageSizingData.imageTarget">
            <summary>
            The polygon on the new image to draw the image to. All 4 points are clockwise.
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.ResizeSettings.ImageSizingData.targetArea">
            <summary>
            The polygon space that will be required (includes letterboxing space). All 4 points are clockwise.
            </summary>
        </member>
        <member name="T:fbs.yrl">
            <summary>
            Enapsulates a mutable (changable) site-relative URL. Note that "" is equivalent to the application root directory in YRL notation (the ~/ is implicit, always).
            QueryFindYrlVerifyID can be removed if external dependencies aren't allowed. It uses fbs.Articles.Index.FindPathByID()
            This class is designed to standardize path interpretation and conversion.
            </summary>
        </member>
        <member name="F:fbs.yrl.BaseFile">
            <summary>
            The base file, usually a .aspx page. Ex. 'home.aspx' or 'admin/new.aspx'. Can also be a base directory, such as articles
            </summary>
        </member>
        <member name="F:fbs.yrl.QueryString">
            <summary>
            A collection of name/value query paramaters. Do NOT UrlEncode/Decode these! That step will be done for you.
            </summary>
        </member>
        <member name="M:fbs.yrl.#ctor">
            <summary>
            Creates a default instance of yrl which  points to the application root directory.
            </summary>
        </member>
        <member name="M:fbs.yrl.FromString(System.String)">
            <summary>
            Returns a yrl object from a path. Returns null if the path cannot be parsed.
            (Out of application bounds, or an invalid character). The tilde is an invalid character unless used as the app-relative specifier.
            </summary>
            <param name="path">A path
            Each query paramater will be UrlDecoded.
            </param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.FromYrlString(System.String)">
            <summary>
            Creates an instance from a yrl-syntax string (virtual, but without ~/). Use FromString if you're not sure what type of syntax is used.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.FromRelativePhysicalString(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.FromPhysicalString(System.String)">
            <summary>
            Creates a yrl Instance from the specified physical path. Throws an exception if the path is outside the application structure.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.GetAppFolderName">
            <summary>
            either '/' or '/folder' like '/yf' or sometimes '/folder/folder'
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.TrimStartAppFolder(System.String)">
            <summary>
            Removes the application folder from the specified path. Leaves the leading forwardslash. 
            Assuming the Application path is /yf, this function will transform /yf/home.aspx to /home.aspx and /yf/css/john.css to /css/john.css
            If the application is located in '/', nothing will be done to the path. Transforms yf/home.aspx to /home.aspx, yf\home.aspx to \home.aspx, \yf\home.aspx to \home.aspx
            Won't work if the app folder has a child directory named the same!
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.GetPathType(System.String)">
            <summary>
            Returns the type of path 
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.Copy">
            <summary>
            Creates a deep copy of the yrl
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.ToString">
            <summary>
            Returns a site-root-relative path along with query paramaters
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.NavigateUrlEncode(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.Equals(System.Object)">
            <summary>
            Compares the hash codes of the two instances.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.GetHashCode">
            <summary>
            Returns a unique hash code derived from the URL property of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.ChangeExtension(System.String)">
            <summary>
            Deletes the old extension and replaces it with the specified extension. A leading '.' is not neccesary
            </summary>
            <param name="newextension"></param>
        </member>
        <member name="M:fbs.yrl.GetNextAvailableDerivitive">
            <summary>
            Returns the next unused filename similar to the current one,by incrementing (i)
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.Combine(fbs.yrl,fbs.yrl)">
            <summary>
            Joins two yrls. Querystrings on either are discarded.
            </summary>
            <param name="folder"></param>
            <param name="filenameOrSubdir"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.CreateAbsoluteUrl(System.String)">
            <summary>
            Returns an absolute path to the current yrl using the specified base path
            </summary>
            <param name="protocolHostnameFolder">A base path like http://youngfoundations.org/ or http://localhost:2755/yf/</param>
            <returns></returns>
        </member>
        <member name="M:fbs.yrl.IsNullOrEmpty(fbs.yrl)">
            <summary>
            Returns true if the yrl is null or empty (site root)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:fbs.yrl.QueryID">
            <summary>
            yrl.QueryString["id"] Returns -1 if not found, -2 if unparseable
            </summary>
        </member>
        <member name="P:fbs.yrl.QueryPath">
            <summary>
            yrl.QueryString["path"]. Returns null if not found, throws exception if not parseable.
            </summary>
        </member>
        <member name="P:fbs.yrl.QueryDir">
            <summary>
            yrl.QueryString["dir"]. Returns null if not found, throws exception if not parseable.
            </summary>
        </member>
        <member name="P:fbs.yrl.QueryFindID">
            <summary>
            Tries to track down the ID by looking at QueryString["id"], then QueryString["path"]. Returns -1 if unsuccessful
            </summary>
        </member>
        <member name="P:fbs.yrl.Local">
            <summary>
            Returns the physical filesystem path for this yrl
            </summary>
            <returns></returns>
        </member>
        <member name="P:fbs.yrl.Virtual">
            <summary>
            Returns the virtual path(~/...)of the base file without query paramaters.
            </summary>
        </member>
        <member name="P:fbs.yrl.VirtualURL">
            <summary>
            Returns the virtual path (~/...) of the base file with query paramaters appended.
            </summary>
        </member>
        <member name="P:fbs.yrl.NavigateURL">
            <summary>
            Returns a ~/ path designed for the Hyperlink.NavigateUrl property
            </summary>
        </member>
        <member name="P:fbs.yrl.URL">
            <summary>
            Returns root-relative URL with query paramaters in the form 'articles/00001002 article.aspx'
            </summary>
        </member>
        <member name="P:fbs.yrl.URLEncoded">
            <summary>
            Returns root-relative URL with query paramaters in the form 'articles/00001002%20article.aspx'
            </summary>
            <returns></returns>
        </member>
        <member name="P:fbs.yrl.URLHtmlEncoded">
            <summary>
            Returns root-relative URL with query paramaters in the form 'articles/00001002%20article.aspx'.
            Encodes special characters into HTML entities using Server.URLPathEncode
            </summary>
        </member>
        <member name="P:fbs.yrl.URLAnchorTarget">
            <summary>
            Returns a domain-relative path in the form '/yf/articles/00001002%20article.aspx'
            </summary>
        </member>
        <member name="P:fbs.yrl.RelativeURL">
            <summary>
            Returns relaitve URL with query paramaters in the form '../articles/00001002 article.aspx'
            </summary>
        </member>
        <member name="P:fbs.yrl.ID">
            <summary>
            Returns the ID if a leading 8-digit ID is found in the base file. Returns -1 otherwise
            </summary>
        </member>
        <member name="P:fbs.yrl.FirstID">
            <summary>
            Returns first leading ID found in a segment of the path.
            </summary>
        </member>
        <member name="P:fbs.yrl.FileExists">
            <summary>
            Returns true if BaseFile exists as a local file.
            </summary>
        </member>
        <member name="P:fbs.yrl.DirExists">
            <summary>
            Returns true if BaseFile exists as a local Directory.
            </summary>
        </member>
        <member name="P:fbs.yrl.DirInfo">
            <summary>
            Returns a DirectoryInfo object for BaseFile if it is a directory. If not, it returns the parent directory
            </summary>
        </member>
        <member name="P:fbs.yrl.Parent">
            <summary>
            Returns a yrl of the parent directory. If the current yrl is already the root, returns null;
            Use 
            </summary>
        </member>
        <member name="P:fbs.yrl.Directory">
            <summary>
            Returns the directory portion of this yrl.
            </summary>
        </member>
        <member name="P:fbs.yrl.Root">
            <summary>
            Returns an instance of yrl that points to the application root.
            </summary>
        </member>
        <member name="P:fbs.yrl.Current">
            <summary>
            Returns the REAL file that is being executed. Falls back to CurrentBrowserUrl if unavailable.
            Unavailable if UrlRewritingNet isn't in use
            </summary>
        </member>
        <member name="P:fbs.yrl.CurrentBrowserURL">
            <summary>
            Retreieves the current URL from HttpContext.Current.Request.Url (pre-rewrite path)
            </summary>
        </member>
        <member name="P:fbs.yrl.Referrer">
            <summary>
            Returns null if unavailable
            </summary>
        </member>
        <member name="P:fbs.yrl.IsEmpty">
            <summary>
            An empty yrl signifies the application root. This verifies both the path and the querystring are empty.
            </summary>
        </member>
        <member name="P:fbs.yrl.IsRoot">
            <summary>
            Returns true if the basefile is empty (the root) (the QueryString can have data). Use IsEmpty to check that both are empty.
            </summary>
        </member>
        <member name="P:fbs.yrl.IsInRoot">
            <summary>
            Returns true if this path has no parent directory (the parent directory is the root).
            </summary>
        </member>
        <member name="P:fbs.yrl.Name">
            <summary>
             Returns the name of the directory (like 'archives') if it is one, and the name of the file (like 'universal.css') if it is a file.
            </summary>
        </member>
        <member name="P:fbs.yrl.NameWithoutExtension">
            <summary>
            Returns the name of BaseFile without the extension.
            </summary>
        </member>
        <member name="P:fbs.yrl.PrettyTitle">
            <summary>
            Returns the filename without the ID or extension, converts underscores to spaces, and trims the string.
            </summary>
        </member>
        <member name="P:fbs.yrl.FilenameWithoutIdAndExtension">
            <summary>
            Returns the filename minus path information, extensions, or Article ID.
            </summary>
        </member>
        <member name="P:fbs.yrl.Extension">
            <summary>
            Returns the extension of BaseFile in the form '.aspx'
            </summary>
        </member>
        <member name="P:fbs.yrl.IsAspx">
            <summary>
            returns true if BaseFile ends with .aspx
            </summary>
        </member>
        <member name="P:fbs.yrl.IsCodeFile">
            <summary>
            returns true if BaseFile ends with .cs or .vb
            </summary>
        </member>
        <member name="P:fbs.yrl.FindAssociatedMarkupFile">
            <summary>
            If this is .aspx.cs or .aspx.vb file, attempts to find and return the associated .aspx file. 
            If this is a .aspx file, returns the current instance.
            Otherwise, this returns null;
            </summary>
        </member>
        <member name="P:fbs.yrl.FindAssociatedCodeFile">
            <summary>
            If this is an .aspx file, attempts to find and return an associated .aspx.cs or .aspx.vb file. 
            If this is .aspx.cs or .aspx.vb file, returns the current instance.
            Otherwise, this returns null;
            </summary>
        </member>
        <member name="T:fbs.yrl.PathType">
            <summary>
            Path syntaxes, determined by patterns.
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.UNCPath">
            <summary>
            \\server\share\
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.BackslashPath">
            <summary>
            A path like '\temp\file.htm'
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.DriveletterColonBackslashPath">
            <summary>
            A path like 'c:\program files\temp'
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.PathBackslashPath">
            <summary>
            a path like 'img\file.img'
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.TildeForwardslashPath">
            <summary>
            a path like '~/home.aspx'
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.ForwardslashPath">
            <summary>
            a path like '/home.aspx'
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.PathForwardslashPath">
            <summary>
            a path like 'img/banner.jpg'
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.ServerForwardslashPath">
            <summary>
            a path like http://www.branham.org/home.aspx
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.File">
            <summary>
            A filename with no path, like 'test.exe' or 'home.aspx'
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.Root">
            <summary>
            Specifies the application root
            </summary>
        </member>
        <member name="F:fbs.yrl.PathType.Invalid">
            <summary>
            Indeterminant form
            </summary>
        </member>
        <member name="T:fbs.ImageResizer.DiskCacheException">
            <summary>
            Indicates a problem with disk caching. Causes include a missing (or too small) ImageDiskCacheDir setting, and severe I/O locking preventing 
            the cache dir from being cleaned at all.
            </summary>
        </member>
        <member name="T:fbs.ImageResizer.DiskCache">
            <summary>
            Provides methods for creating, maintaining, and securing the disk cache. 
            Extending this to work for database-sourced (or anything) vs disk-source data 
            could be done by making alternative UpdateCachedVersionIfNeeded and IsCachedVersionValid
            methods that accept DateTime instances instead of filenames. 
            
            </summary>
        </member>
        <member name="F:fbs.ImageResizer.DiskCache.webConfigFile">
            <summary>
            This string contains the contents of a web.conig file that sets URL authorization to "deny all" inside the current directory.
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.UpdateCachedVersionIfNeeded(System.String,System.String,fbs.ImageResizer.DiskCache.CacheUpdateCallback,System.Int32)">
            <summary>
            Checks if an update is needed on the specified file... calls the method if needed.
            Fixed: Implement locking to prevent I/O conflicts on concurrent inital request
            Returns false if a lock on the source file could not be acquired within fileLockTimeout ms. -1 for indefinite wait - not reccomended!
            Only one resize operation can be performed on a source file at a time. This method enforces that, and should eliminte costly I/O 'access denied' messages.
            Of course, locking based on source filename also eliminates writing contention on cached files..
            </summary>
            <param name="sourceFilename"></param>
            <param name="cachedFilename"></param>
            <param name="updateCallback"></param>
        </member>
        <member name="F:fbs.ImageResizer.DiskCache.fileLocks">
            <summary>
            The only objects in this collection should be for open files. 
            </summary>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.IsCachedVersionValid(System.String,System.String)">
            <summary>
            Assumes localSourceFile exists. Returns true if localCachedFile exists and matches the last write time of localSourceFile.
            </summary>
            <param name="localSourceFile">full physical path of original file</param>
            <param name="cachedFilename">full physical path of cached file.</param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.IsCachedVersionValid(System.DateTime,System.String)">
            <summary>
             Returns true if localCachedFile exists and matches sourceDataModifiedUTC.
            </summary>
            <param name="sourceDataModifiedUTC"></param>
            <param name="localCachedFile"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.PrepareCacheDir">
            <summary>
            Creates the directory for caching if needed, and performs 'garbage collection'
            Throws a DiskCacheException if the cache direcotry isn't specified in web.config
            Creates a web.config file in the caching directory to prevent direct access.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.GetCacheDir">
            <summary>
            Returns the physical path of the image cache dir. Calcualted from AppSettings["ImageDiskCacheDir"] (yrl form). throws an exception if missing
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.TrimDirectoryFiles(System.String,System.Int32,System.Int32)">
            <summary>
            Deletes least-used files from the directory (if needed)
            Throws an exception if cleanup fails.
            Returns true if any files were deleted.
            </summary>
            <param name="dir">The directory to clean up</param>
            <param name="maxCount">The maximum number of files to leave in the directory. Does nothing if this is less than 0</param>
            <param name="deleteExtra">How many extra files to delete if deletions are required</param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.CompareFiles(System.Collections.Generic.KeyValuePair{System.String,System.DateTime},System.Collections.Generic.KeyValuePair{System.String,System.DateTime})">
            <summary>
            Compares the file dates on the arguments
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.RoughCompare(System.DateTime,System.DateTime)">
            <summary>
            Returns true if both dates are equal (to the nearest 200th of a second)
            </summary>
            <param name="modifiedOn"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.ClearCacheDir">
            <summary>
            Clears the cache directory. Returns true if successful. (In-use files make this rare).
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.GetMaxWidth">
            <summary>
            Returns the value of AppSettings["ImageResizerMaxWidth"], or 640 if the setting is missing
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.GetMaxHeight">
            <summary>
            Returns the value of AppSettings["ImageResizerMaxHeight"], or 480 if the setting is missing
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.GetMaxCachedFiles">
            <summary>
            Returns the value of required setting AppSettings["MaxCachedImages"], or 400 if it is missing. An event will be logged if it is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.CacheDirExists">
            <summary>
            Returns true if the image caching directory (GetCacheDir()) exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.GetCacheDirFilesCount">
            <summary>
            Returns the number of files inside the image cache directory (recursive traversal)
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.GetCacheDirTotalSize">
            <summary>
            Returns the summation of the size of the indiviual files in the image cache directory (recursive traversal)
            </summary>
            <returns></returns>
        </member>
        <member name="M:fbs.ImageResizer.DiskCache.GetAverageCachedFileSize">
            <summary>
            Returns the average size of a file in the image cache directory. Expensive, calls GetCacheDirFilesCount() and GetCacheDirTotalSize()
            </summary>
            <returns></returns>
        </member>
        <member name="T:fbs.ImageResizer.DiskCache.CacheUpdateCallback">
            <summary>
            A callback method that will perform the resize and update the file. This doesn't need paramaters since an anonymous function can be used.
            </summary>
        </member>
    </members>
</doc>
