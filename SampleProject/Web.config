<?xml version="1.0"?>
<configuration>
	<appSettings>
		<!-- The directory to store cached version of images. Relative to the application root.
    If you want the cache outside the application, use a Virtual Folder in IIS to
    point the physical location elsewhere. -->
		<add key="ImageDiskCacheDir" value="imagecache"/>
		<!-- How many files to keep in the cache. The 10% least recently used files will be deleted
when this limit is reached. Don't set this lower than the number of images on your site. 2x the image count is a
 good default. If you are getting "Access Denied" messages, this is the cuplrit - you need to increase it-->
		<add key="MaxCachedImages" value="80000"/>
		<!-- The maximum size to permit images to be resized to. -->
		<add key="ImageResizerMaxWidth" value="1680"/>
		<add key="ImageResizerMaxHeight" value="1680"/>
		<!-- Takes effect in version 1.2+. The default (for all versions) is 1440 minutes (24 hours).
        Set to 0 to disable *client* caching (304 "Not Modified" responses will still be returned
        if nothing has changed). Client caching is not related to disk caching.-->
		<add key="ImageResizerClientCacheMinutes" value="0"/>
		<!-- This enables /resize(x,y,f)/image.jpg notation and other CustomFolders.cs
rewriting (other than querystring-only changes) in v2.0. Enabling this
      will make URL authorization ineffective on image files on version prior to 2.1b.-->
		<add key="AllowURLRewriting" value="true"/>
		<!-- v2.2+ Disables modified date checking (i.e, cached files are never updated, unless the VirtualFile implements IVirtualFileWithModifiedDatae). Uses the registered VirutalPathProvider -->
		<add key="ImageResizerUseVirtualPathProvider" value="false"/>
		<!-- v2.5+ Only executes the virtual path provider if the physical file doesn't exist -->
		<add key="ImageResizerUseVirtualPathProviderAsFallback" value="false"/>
		<!-- v2.3+ When set to a non-empty value, divides the cache into the specified number of subfolders. MUST be a power of two, or it will get 
    rounded up to the next power of two, which might be VERY different from the configured value.
    Values above 8096 are not suggested for best NTFS performance. Suggested value is (MaxCachedImages / 7500).
    Remember to delete the imagecache folder every time you change this value - otherwise lots of orphaned files will be there.
    -->
		<add key="ImageCacheSubfolders" value="8"/>
		<!-- (v2 only) Prevents use of cached files - useful for development when changing resizing algorithms. 
          Causes terrible performance - don't leave enabled.-->
		<add key="DiskCacheAlwaysInvalid" value="true"/>
		<!-- (v2 only) Prevents the cache cleanup routine from running. If you want to 
        manually purge the image cache yourself, and aren't worried about running out 
        of disk space via a DOS attack, you can disable this. Not advised. -->
		<add key="DisableCacheCleanup" value="false"/>
		<!-- Disabling custom quantization allows the resizer to function in low trust environments where managed pointer
     access and data type marshaling is prohibited. However, PNGs and BMPs can only be output in 32-bit mode, and GIFs will use the default h
     halftone pallete. Enable this if JPGs and PNGs work, but GIFs don't, and using colors=255 on PNGs causes them to break also.
     Causes much lower quality GIFs to be generated.
      Version 2.1+.    
    -->
		<add key="DisableCustomQuantization" value="false"/>
		<!-- This allows images to be resized without any IIS configuration whatsoever. 
        Just set this value to ".ashx", ".axd", ".aspx" or any ASP.NET-registered extension, and
        add the same extension to your image URLs when you are resizing them. 
        
        When configured properly in IIS, any extension should work, but ".ashx" seems to be configured right on the largest number of servers.
        
        Ex. /images/media/flower.jpg -> /images/media/flower.jpg.cd?width=x&height=y

        AllowURLRewriting must be true. 
        
      Version 2.1b+.    
    -->
		<add key="ResizeExtension" value=".ashx"/>
		<!-- v2.6+ Disables the additional URL authorization checkes performed by the resizer after URL rewriting. -->
		<add key="DisableImageURLAuthorization" value="false"/>
	</appSettings>
	<connectionStrings/>
	<system.web>
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
		<compilation debug="true" targetFramework="4.0"/>
		<!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
		<authentication mode="Windows"/>
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
		<httpModules>
			<add name="ImageResizingModule" type="fbs.ImageResizer.InterceptModule"/>
		</httpModules>
		<pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/></system.web>
	<system.webServer>
		<modules>
			<add name="ImageResizingModule" type="fbs.ImageResizer.InterceptModule"/>
		</modules>
	</system.webServer>
</configuration>
